# Form implementation generated from reading ui file 'qt_project/mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 900)
        MainWindow.setMinimumSize(QtCore.QSize(400, 600))
        MainWindow.setStyleSheet("background-color: rgb(235, 235, 235);\n"
"color: rgb(20, 20, 20);")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(9, 5, 9, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.modeTabs = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.modeTabs.setObjectName("modeTabs")
        self.segmentTab = QtWidgets.QWidget()
        self.segmentTab.setObjectName("segmentTab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.segmentTab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.processSegGroup = QtWidgets.QGroupBox(parent=self.segmentTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.processSegGroup.sizePolicy().hasHeightForWidth())
        self.processSegGroup.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.processSegGroup.setFont(font)
        self.processSegGroup.setStyleSheet("")
        self.processSegGroup.setFlat(False)
        self.processSegGroup.setObjectName("processSegGroup")
        self.gridLayout = QtWidgets.QGridLayout(self.processSegGroup)
        self.gridLayout.setObjectName("gridLayout")
        self.replaceSelectProc = QtWidgets.QToolButton(parent=self.processSegGroup)
        self.replaceSelectProc.setEnabled(True)
        self.replaceSelectProc.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/open_folder.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.replaceSelectProc.setIcon(icon)
        self.replaceSelectProc.setObjectName("replaceSelectProc")
        self.gridLayout.addWidget(self.replaceSelectProc, 1, 4, 1, 1)
        self.rawDirectoryLabel = QtWidgets.QLabel(parent=self.processSegGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rawDirectoryLabel.sizePolicy().hasHeightForWidth())
        self.rawDirectoryLabel.setSizePolicy(sizePolicy)
        self.rawDirectoryLabel.setObjectName("rawDirectoryLabel")
        self.gridLayout.addWidget(self.rawDirectoryLabel, 0, 0, 1, 2)
        self.rawDirectory = QtWidgets.QLineEdit(parent=self.processSegGroup)
        self.rawDirectory.setFrame(True)
        self.rawDirectory.setObjectName("rawDirectory")
        self.gridLayout.addWidget(self.rawDirectory, 0, 3, 1, 1)
        self.processButtonSeg = QtWidgets.QPushButton(parent=self.processSegGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.processButtonSeg.setFont(font)
        self.processButtonSeg.setObjectName("processButtonSeg")
        self.gridLayout.addWidget(self.processButtonSeg, 2, 0, 1, 5)
        self.rawSelect = QtWidgets.QToolButton(parent=self.processSegGroup)
        self.rawSelect.setText("")
        self.rawSelect.setIcon(icon)
        self.rawSelect.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup)
        self.rawSelect.setObjectName("rawSelect")
        self.gridLayout.addWidget(self.rawSelect, 0, 4, 1, 1)
        self.replaceDirectoryProc = QtWidgets.QLineEdit(parent=self.processSegGroup)
        self.replaceDirectoryProc.setEnabled(True)
        self.replaceDirectoryProc.setObjectName("replaceDirectoryProc")
        self.gridLayout.addWidget(self.replaceDirectoryProc, 1, 3, 1, 1)
        self.replaceDirectoryLabelProc = QtWidgets.QLabel(parent=self.processSegGroup)
        self.replaceDirectoryLabelProc.setEnabled(True)
        self.replaceDirectoryLabelProc.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.replaceDirectoryLabelProc.setObjectName("replaceDirectoryLabelProc")
        self.gridLayout.addWidget(self.replaceDirectoryLabelProc, 1, 1, 1, 1)
        self.replaceCheckboxProc = QtWidgets.QCheckBox(parent=self.processSegGroup)
        self.replaceCheckboxProc.setChecked(True)
        self.replaceCheckboxProc.setObjectName("replaceCheckboxProc")
        self.gridLayout.addWidget(self.replaceCheckboxProc, 1, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.processSegGroup)
        self.segGroup = QtWidgets.QGroupBox(parent=self.segmentTab)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.segGroup.setFont(font)
        self.segGroup.setObjectName("segGroup")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.segGroup)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.addModelButton = QtWidgets.QToolButton(parent=self.segGroup)
        self.addModelButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/add.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.addModelButton.setIcon(icon1)
        self.addModelButton.setObjectName("addModelButton")
        self.gridLayout_2.addWidget(self.addModelButton, 1, 9, 1, 1)
        self.segmentButton = QtWidgets.QPushButton(parent=self.segGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.segmentButton.setFont(font)
        self.segmentButton.setObjectName("segmentButton")
        self.gridLayout_2.addWidget(self.segmentButton, 6, 0, 1, 11)
        self.dataSelect = QtWidgets.QToolButton(parent=self.segGroup)
        self.dataSelect.setText("")
        self.dataSelect.setIcon(icon)
        self.dataSelect.setObjectName("dataSelect")
        self.gridLayout_2.addWidget(self.dataSelect, 0, 10, 1, 1)
        self.modelInfoBox = QtWidgets.QGroupBox(parent=self.segGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelInfoBox.sizePolicy().hasHeightForWidth())
        self.modelInfoBox.setSizePolicy(sizePolicy)
        self.modelInfoBox.setObjectName("modelInfoBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.modelInfoBox)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.modelTabs = QtWidgets.QTabWidget(parent=self.modelInfoBox)
        self.modelTabs.setObjectName("modelTabs")
        self.horizontalLayout.addWidget(self.modelTabs)
        self.gridLayout_2.addWidget(self.modelInfoBox, 2, 4, 1, 7)
        self.replaceDirectorySeg = QtWidgets.QLineEdit(parent=self.segGroup)
        self.replaceDirectorySeg.setEnabled(True)
        self.replaceDirectorySeg.setObjectName("replaceDirectorySeg")
        self.gridLayout_2.addWidget(self.replaceDirectorySeg, 3, 2, 1, 8)
        self.dataDirectory = QtWidgets.QLineEdit(parent=self.segGroup)
        self.dataDirectory.setObjectName("dataDirectory")
        self.gridLayout_2.addWidget(self.dataDirectory, 0, 1, 1, 9)
        self.replaceCheckboxSeg = QtWidgets.QCheckBox(parent=self.segGroup)
        self.replaceCheckboxSeg.setChecked(True)
        self.replaceCheckboxSeg.setObjectName("replaceCheckboxSeg")
        self.gridLayout_2.addWidget(self.replaceCheckboxSeg, 3, 0, 1, 1)
        self.dataDirectoryLabel = QtWidgets.QLabel(parent=self.segGroup)
        self.dataDirectoryLabel.setObjectName("dataDirectoryLabel")
        self.gridLayout_2.addWidget(self.dataDirectoryLabel, 0, 0, 1, 1)
        self.modelCombo = QtWidgets.QComboBox(parent=self.segGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelCombo.sizePolicy().hasHeightForWidth())
        self.modelCombo.setSizePolicy(sizePolicy)
        self.modelCombo.setObjectName("modelCombo")
        self.gridLayout_2.addWidget(self.modelCombo, 1, 1, 1, 7)
        self.removeModelButton = QtWidgets.QToolButton(parent=self.segGroup)
        self.removeModelButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/remove.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.removeModelButton.setIcon(icon2)
        self.removeModelButton.setObjectName("removeModelButton")
        self.gridLayout_2.addWidget(self.removeModelButton, 1, 10, 1, 1)
        self.importModelButton = QtWidgets.QToolButton(parent=self.segGroup)
        self.importModelButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/file.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.importModelButton.setIcon(icon3)
        self.importModelButton.setObjectName("importModelButton")
        self.gridLayout_2.addWidget(self.importModelButton, 1, 8, 1, 1)
        self.replaceDirectoryLabelSeg = QtWidgets.QLabel(parent=self.segGroup)
        self.replaceDirectoryLabelSeg.setEnabled(True)
        self.replaceDirectoryLabelSeg.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.replaceDirectoryLabelSeg.setObjectName("replaceDirectoryLabelSeg")
        self.gridLayout_2.addWidget(self.replaceDirectoryLabelSeg, 3, 1, 1, 1)
        self.selectedModelArea = QtWidgets.QScrollArea(parent=self.segGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectedModelArea.sizePolicy().hasHeightForWidth())
        self.selectedModelArea.setSizePolicy(sizePolicy)
        self.selectedModelArea.setWidgetResizable(True)
        self.selectedModelArea.setObjectName("selectedModelArea")
        self.selectedModelScroll = QtWidgets.QWidget()
        self.selectedModelScroll.setGeometry(QtCore.QRect(0, 0, 237, 298))
        self.selectedModelScroll.setObjectName("selectedModelScroll")
        self.formLayout_4 = QtWidgets.QFormLayout(self.selectedModelScroll)
        self.formLayout_4.setObjectName("formLayout_4")
        self.nameLabelCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.nameLabelCurrent.setObjectName("nameLabelCurrent")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.nameLabelCurrent)
        self.nameDisplayCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.nameDisplayCurrent.setText("")
        self.nameDisplayCurrent.setObjectName("nameDisplayCurrent")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.nameDisplayCurrent)
        self.archLabelCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.archLabelCurrent.setObjectName("archLabelCurrent")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.archLabelCurrent)
        self.archDisplayCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.archDisplayCurrent.setText("")
        self.archDisplayCurrent.setObjectName("archDisplayCurrent")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.archDisplayCurrent)
        self.sampleLabelCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.sampleLabelCurrent.setObjectName("sampleLabelCurrent")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.sampleLabelCurrent)
        self.sampleDisplayCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.sampleDisplayCurrent.setText("")
        self.sampleDisplayCurrent.setObjectName("sampleDisplayCurrent")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.sampleDisplayCurrent)
        self.segmentLabelCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.segmentLabelCurrent.setObjectName("segmentLabelCurrent")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.segmentLabelCurrent)
        self.segmentDisplayCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.segmentDisplayCurrent.setText("")
        self.segmentDisplayCurrent.setObjectName("segmentDisplayCurrent")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.segmentDisplayCurrent)
        self.metricLabelCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.metricLabelCurrent.setObjectName("metricLabelCurrent")
        self.formLayout_4.setWidget(4, QtWidgets.QFormLayout.ItemRole.LabelRole, self.metricLabelCurrent)
        self.metricDisplayCurrent = QtWidgets.QLabel(parent=self.selectedModelScroll)
        self.metricDisplayCurrent.setText("")
        self.metricDisplayCurrent.setObjectName("metricDisplayCurrent")
        self.formLayout_4.setWidget(4, QtWidgets.QFormLayout.ItemRole.FieldRole, self.metricDisplayCurrent)
        self.selectedModelArea.setWidget(self.selectedModelScroll)
        self.gridLayout_2.addWidget(self.selectedModelArea, 2, 0, 1, 4)
        self.replaceSelectSeg = QtWidgets.QToolButton(parent=self.segGroup)
        self.replaceSelectSeg.setEnabled(True)
        self.replaceSelectSeg.setText("")
        self.replaceSelectSeg.setIcon(icon)
        self.replaceSelectSeg.setObjectName("replaceSelectSeg")
        self.gridLayout_2.addWidget(self.replaceSelectSeg, 3, 10, 1, 1)
        self.modelLabel = QtWidgets.QLabel(parent=self.segGroup)
        self.modelLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.modelLabel.setObjectName("modelLabel")
        self.gridLayout_2.addWidget(self.modelLabel, 1, 0, 1, 1)
        self.featureButtonSeg = QtWidgets.QPushButton(parent=self.segGroup)
        self.featureButtonSeg.setObjectName("featureButtonSeg")
        self.gridLayout_2.addWidget(self.featureButtonSeg, 4, 0, 1, 11)
        self.verticalLayout_2.addWidget(self.segGroup)
        self.modeTabs.addTab(self.segmentTab, "")
        self.trainingTab = QtWidgets.QWidget()
        self.trainingTab.setObjectName("trainingTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.trainingTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.sampleSelectFrame = QtWidgets.QFrame(parent=self.trainingTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sampleSelectFrame.sizePolicy().hasHeightForWidth())
        self.sampleSelectFrame.setSizePolicy(sizePolicy)
        self.sampleSelectFrame.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.sampleSelectFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.sampleSelectFrame.setLineWidth(0)
        self.sampleSelectFrame.setObjectName("sampleSelectFrame")
        self.sampleSelectLayout = QtWidgets.QHBoxLayout(self.sampleSelectFrame)
        self.sampleSelectLayout.setContentsMargins(10, -1, -1, -1)
        self.sampleSelectLayout.setObjectName("sampleSelectLayout")
        self.sampleSelectLabel = QtWidgets.QLabel(parent=self.sampleSelectFrame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sampleSelectLabel.setFont(font)
        self.sampleSelectLabel.setObjectName("sampleSelectLabel")
        self.sampleSelectLayout.addWidget(self.sampleSelectLabel)
        self.sampleSelectCombo = QtWidgets.QComboBox(parent=self.sampleSelectFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sampleSelectCombo.sizePolicy().hasHeightForWidth())
        self.sampleSelectCombo.setSizePolicy(sizePolicy)
        self.sampleSelectCombo.setEditable(False)
        self.sampleSelectCombo.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAlphabetically)
        self.sampleSelectCombo.setObjectName("sampleSelectCombo")
        self.sampleSelectLayout.addWidget(self.sampleSelectCombo)
        self.sampleAdd = QtWidgets.QToolButton(parent=self.sampleSelectFrame)
        self.sampleAdd.setText("")
        self.sampleAdd.setIcon(icon1)
        self.sampleAdd.setObjectName("sampleAdd")
        self.sampleSelectLayout.addWidget(self.sampleAdd)
        self.verticalLayout_4.addWidget(self.sampleSelectFrame)
        self.processTrainGroup = QtWidgets.QGroupBox(parent=self.trainingTab)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.processTrainGroup.setFont(font)
        self.processTrainGroup.setObjectName("processTrainGroup")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.processTrainGroup)
        self.gridLayout_3.setContentsMargins(9, -1, -1, -1)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.replaceSelectProcTrain = QtWidgets.QToolButton(parent=self.processTrainGroup)
        self.replaceSelectProcTrain.setEnabled(True)
        self.replaceSelectProcTrain.setText("")
        self.replaceSelectProcTrain.setIcon(icon)
        self.replaceSelectProcTrain.setObjectName("replaceSelectProcTrain")
        self.gridLayout_3.addWidget(self.replaceSelectProcTrain, 2, 3, 1, 1)
        self.rawDirectoryLabelTrain = QtWidgets.QLabel(parent=self.processTrainGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rawDirectoryLabelTrain.sizePolicy().hasHeightForWidth())
        self.rawDirectoryLabelTrain.setSizePolicy(sizePolicy)
        self.rawDirectoryLabelTrain.setObjectName("rawDirectoryLabelTrain")
        self.gridLayout_3.addWidget(self.rawDirectoryLabelTrain, 0, 0, 1, 2)
        self.replaceDirectoryProcTrain = QtWidgets.QLineEdit(parent=self.processTrainGroup)
        self.replaceDirectoryProcTrain.setEnabled(True)
        self.replaceDirectoryProcTrain.setObjectName("replaceDirectoryProcTrain")
        self.gridLayout_3.addWidget(self.replaceDirectoryProcTrain, 2, 2, 1, 1)
        self.replaceDirectoryLabelProcTrain = QtWidgets.QLabel(parent=self.processTrainGroup)
        self.replaceDirectoryLabelProcTrain.setEnabled(True)
        self.replaceDirectoryLabelProcTrain.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.replaceDirectoryLabelProcTrain.setObjectName("replaceDirectoryLabelProcTrain")
        self.gridLayout_3.addWidget(self.replaceDirectoryLabelProcTrain, 2, 1, 1, 1)
        self.rawDirectoryTrain = QtWidgets.QLineEdit(parent=self.processTrainGroup)
        self.rawDirectoryTrain.setObjectName("rawDirectoryTrain")
        self.gridLayout_3.addWidget(self.rawDirectoryTrain, 0, 2, 1, 1)
        self.replaceCheckboxProcTrain = QtWidgets.QCheckBox(parent=self.processTrainGroup)
        self.replaceCheckboxProcTrain.setChecked(True)
        self.replaceCheckboxProcTrain.setObjectName("replaceCheckboxProcTrain")
        self.gridLayout_3.addWidget(self.replaceCheckboxProcTrain, 2, 0, 1, 1)
        self.rawSelectTrain = QtWidgets.QToolButton(parent=self.processTrainGroup)
        self.rawSelectTrain.setToolTip("")
        self.rawSelectTrain.setText("")
        self.rawSelectTrain.setIcon(icon)
        self.rawSelectTrain.setObjectName("rawSelectTrain")
        self.gridLayout_3.addWidget(self.rawSelectTrain, 0, 3, 1, 1)
        self.processButtonTrain = QtWidgets.QPushButton(parent=self.processTrainGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.processButtonTrain.setFont(font)
        self.processButtonTrain.setObjectName("processButtonTrain")
        self.gridLayout_3.addWidget(self.processButtonTrain, 3, 0, 1, 4)
        self.verticalLayout_4.addWidget(self.processTrainGroup)
        self.annotGroup = QtWidgets.QGroupBox(parent=self.trainingTab)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.annotGroup.setFont(font)
        self.annotGroup.setObjectName("annotGroup")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.annotGroup)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.sliceSelect = QtWidgets.QToolButton(parent=self.annotGroup)
        self.sliceSelect.setText("")
        self.sliceSelect.setIcon(icon)
        self.sliceSelect.setObjectName("sliceSelect")
        self.gridLayout_4.addWidget(self.sliceSelect, 2, 2, 1, 1)
        self.csvDirectory = QtWidgets.QLineEdit(parent=self.annotGroup)
        self.csvDirectory.setObjectName("csvDirectory")
        self.gridLayout_4.addWidget(self.csvDirectory, 1, 1, 1, 1)
        self.chimeraButton = QtWidgets.QPushButton(parent=self.annotGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chimeraButton.setFont(font)
        self.chimeraButton.setObjectName("chimeraButton")
        self.gridLayout_4.addWidget(self.chimeraButton, 3, 0, 1, 3)
        self.csvDirectoryLabel = QtWidgets.QLabel(parent=self.annotGroup)
        self.csvDirectoryLabel.setObjectName("csvDirectoryLabel")
        self.gridLayout_4.addWidget(self.csvDirectoryLabel, 1, 0, 1, 1)
        self.annoDirectoryLabel = QtWidgets.QLabel(parent=self.annotGroup)
        self.annoDirectoryLabel.setObjectName("annoDirectoryLabel")
        self.gridLayout_4.addWidget(self.annoDirectoryLabel, 4, 0, 1, 1)
        self.annoSelect = QtWidgets.QToolButton(parent=self.annotGroup)
        self.annoSelect.setToolTip("")
        self.annoSelect.setText("")
        self.annoSelect.setIcon(icon)
        self.annoSelect.setObjectName("annoSelect")
        self.gridLayout_4.addWidget(self.annoSelect, 4, 2, 1, 1)
        self.sliceDirectoryLabel = QtWidgets.QLabel(parent=self.annotGroup)
        self.sliceDirectoryLabel.setObjectName("sliceDirectoryLabel")
        self.gridLayout_4.addWidget(self.sliceDirectoryLabel, 2, 0, 1, 1)
        self.annoDirectory = QtWidgets.QLineEdit(parent=self.annotGroup)
        self.annoDirectory.setObjectName("annoDirectory")
        self.gridLayout_4.addWidget(self.annoDirectory, 4, 1, 1, 1)
        self.featuresDisplay = QtWidgets.QLineEdit(parent=self.annotGroup)
        self.featuresDisplay.setObjectName("featuresDisplay")
        self.gridLayout_4.addWidget(self.featuresDisplay, 5, 1, 1, 1)
        self.csvSelect = QtWidgets.QToolButton(parent=self.annotGroup)
        self.csvSelect.setText("")
        self.csvSelect.setIcon(icon)
        self.csvSelect.setObjectName("csvSelect")
        self.gridLayout_4.addWidget(self.csvSelect, 1, 2, 1, 1)
        self.splitsButton = QtWidgets.QPushButton(parent=self.annotGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.splitsButton.setFont(font)
        self.splitsButton.setObjectName("splitsButton")
        self.gridLayout_4.addWidget(self.splitsButton, 6, 0, 1, 3)
        self.sliceDirectory = QtWidgets.QLineEdit(parent=self.annotGroup)
        self.sliceDirectory.setObjectName("sliceDirectory")
        self.gridLayout_4.addWidget(self.sliceDirectory, 2, 1, 1, 1)
        self.featuresLabel = QtWidgets.QLabel(parent=self.annotGroup)
        self.featuresLabel.setObjectName("featuresLabel")
        self.gridLayout_4.addWidget(self.featuresLabel, 5, 0, 1, 1)
        self.featuresAdd = QtWidgets.QToolButton(parent=self.annotGroup)
        self.featuresAdd.setText("")
        self.featuresAdd.setIcon(icon1)
        self.featuresAdd.setObjectName("featuresAdd")
        self.gridLayout_4.addWidget(self.featuresAdd, 5, 2, 1, 1)
        self.splitsButtonNew = QtWidgets.QPushButton(parent=self.annotGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.splitsButtonNew.setFont(font)
        self.splitsButtonNew.setObjectName("splitsButtonNew")
        self.gridLayout_4.addWidget(self.splitsButtonNew, 7, 0, 1, 3)
        self.dataDirectoryLabelTrain = QtWidgets.QLabel(parent=self.annotGroup)
        self.dataDirectoryLabelTrain.setObjectName("dataDirectoryLabelTrain")
        self.gridLayout_4.addWidget(self.dataDirectoryLabelTrain, 0, 0, 1, 1)
        self.dataDirectoryTrain = QtWidgets.QLineEdit(parent=self.annotGroup)
        self.dataDirectoryTrain.setObjectName("dataDirectoryTrain")
        self.gridLayout_4.addWidget(self.dataDirectoryTrain, 0, 1, 1, 1)
        self.dataSelectTrain = QtWidgets.QToolButton(parent=self.annotGroup)
        self.dataSelectTrain.setText("")
        self.dataSelectTrain.setIcon(icon)
        self.dataSelectTrain.setObjectName("dataSelectTrain")
        self.gridLayout_4.addWidget(self.dataSelectTrain, 0, 2, 1, 1)
        self.verticalLayout_4.addWidget(self.annotGroup)
        self.trainGroup = QtWidgets.QGroupBox(parent=self.trainingTab)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.trainGroup.setFont(font)
        self.trainGroup.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.trainGroup.setObjectName("trainGroup")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.trainGroup)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.modelSettings = QtWidgets.QToolButton(parent=self.trainGroup)
        self.modelSettings.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/wrench.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.modelSettings.setIcon(icon4)
        self.modelSettings.setObjectName("modelSettings")
        self.gridLayout_5.addWidget(self.modelSettings, 0, 2, 1, 1)
        self.trainButton = QtWidgets.QPushButton(parent=self.trainGroup)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.trainButton.setFont(font)
        self.trainButton.setObjectName("trainButton")
        self.gridLayout_5.addWidget(self.trainButton, 3, 0, 1, 3)
        self.labelLabel = QtWidgets.QLabel(parent=self.trainGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelLabel.sizePolicy().hasHeightForWidth())
        self.labelLabel.setSizePolicy(sizePolicy)
        self.labelLabel.setObjectName("labelLabel")
        self.gridLayout_5.addWidget(self.labelLabel, 1, 0, 1, 1)
        self.modelComboTrain = QtWidgets.QComboBox(parent=self.trainGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelComboTrain.sizePolicy().hasHeightForWidth())
        self.modelComboTrain.setSizePolicy(sizePolicy)
        self.modelComboTrain.setToolTip("")
        self.modelComboTrain.setObjectName("modelComboTrain")
        self.gridLayout_5.addWidget(self.modelComboTrain, 0, 1, 1, 1)
        self.labelCombo = QtWidgets.QComboBox(parent=self.trainGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelCombo.sizePolicy().hasHeightForWidth())
        self.labelCombo.setSizePolicy(sizePolicy)
        self.labelCombo.setToolTip("")
        self.labelCombo.setObjectName("labelCombo")
        self.gridLayout_5.addWidget(self.labelCombo, 1, 1, 1, 2)
        self.modelLabelTrain = QtWidgets.QLabel(parent=self.trainGroup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.modelLabelTrain.sizePolicy().hasHeightForWidth())
        self.modelLabelTrain.setSizePolicy(sizePolicy)
        self.modelLabelTrain.setObjectName("modelLabelTrain")
        self.gridLayout_5.addWidget(self.modelLabelTrain, 0, 0, 1, 1)
        self.featureButtonTrain = QtWidgets.QPushButton(parent=self.trainGroup)
        self.featureButtonTrain.setObjectName("featureButtonTrain")
        self.gridLayout_5.addWidget(self.featureButtonTrain, 2, 0, 1, 3)
        self.verticalLayout_4.addWidget(self.trainGroup)
        self.modeTabs.addTab(self.trainingTab, "")
        self.verticalLayout.addWidget(self.modeTabs)
        self.consoleBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.consoleBox.setFont(font)
        self.consoleBox.setObjectName("consoleBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.consoleBox)
        self.verticalLayout_3.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_3.setSpacing(1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.consoleText = QtWidgets.QTextBrowser(parent=self.consoleBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.consoleText.sizePolicy().hasHeightForWidth())
        self.consoleText.setSizePolicy(sizePolicy)
        self.consoleText.setStyleSheet("background-color: rgb(90, 90, 90);\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(90, 90, 90);")
        self.consoleText.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
        self.consoleText.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.consoleText.setDocumentTitle("")
        self.consoleText.setReadOnly(True)
        self.consoleText.setAcceptRichText(True)
        self.consoleText.setObjectName("consoleText")
        self.verticalLayout_3.addWidget(self.consoleText)
        self.progressBar = QtWidgets.QProgressBar(parent=self.consoleBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.progressBar.setFont(font)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_3.addWidget(self.progressBar)
        self.verticalLayout.addWidget(self.consoleBox)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 21))
        self.menubar.setAutoFillBackground(False)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(235, 235, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 20, 20, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.PlaceholderText, brush)
        self.menuFile.setPalette(palette)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.actionSettings = QtGui.QAction(parent=MainWindow)
        self.actionSettings.setCheckable(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/settings.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSettings.setIcon(icon5)
        self.actionSettings.setObjectName("actionSettings")
        self.actionGithub = QtGui.QAction(parent=MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/github.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionGithub.setIcon(icon6)
        self.actionGithub.setObjectName("actionGithub")
        self.actionSave_Preset = QtGui.QAction(parent=MainWindow)
        self.actionSave_Preset.setObjectName("actionSave_Preset")
        self.actiondefault = QtGui.QAction(parent=MainWindow)
        self.actiondefault.setObjectName("actiondefault")
        self.action = QtGui.QAction(parent=MainWindow)
        self.action.setObjectName("action")
        self.actionSaveAs_Preset = QtGui.QAction(parent=MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/save.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSaveAs_Preset.setIcon(icon7)
        self.actionSaveAs_Preset.setObjectName("actionSaveAs_Preset")
        self.actionLoad_Preset = QtGui.QAction(parent=MainWindow)
        self.actionLoad_Preset.setIcon(icon3)
        self.actionLoad_Preset.setObjectName("actionLoad_Preset")
        self.menuFile.addAction(self.actionLoad_Preset)
        self.menuFile.addAction(self.actionSave_Preset)
        self.menuFile.addAction(self.actionSaveAs_Preset)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSettings)
        self.menuHelp.addAction(self.actionGithub)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.modeTabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CryoViT Segmentation"))
        self.processSegGroup.setTitle(_translate("MainWindow", "Pre-Processing"))
        self.rawDirectoryLabel.setText(_translate("MainWindow", "Raw Tomogram Directory:"))
        self.rawDirectory.setToolTip(_translate("MainWindow", "<html><head/><body><p>The <span style=\" font-weight:700;\">raw tomogram</span> directory.</p><p>If <span style=\" font-weight:700;\">Training Samples</span> are selected, this contains <span style=\" font-weight:700;\">sample</span> folders.</p><p>If no samples are selected, this contains tomogram files.</p></body></html>"))
        self.rawDirectory.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/raw/samples"))
        self.processButtonSeg.setText(_translate("MainWindow", "Run Pre-processing"))
        self.replaceDirectoryProc.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/processed/samples"))
        self.replaceDirectoryLabelProc.setText(_translate("MainWindow", "Directory:"))
        self.replaceCheckboxProc.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add the pre-processed data to the existing tomogram under the <span style=\" font-weight:700;\">[data]</span> dataset.</p><p>If not, specify a results directory to copy pre-processed tomograms to.</p></body></html>"))
        self.replaceCheckboxProc.setText(_translate("MainWindow", "Replace?"))
        self.segGroup.setTitle(_translate("MainWindow", "Segmentation"))
        self.addModelButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add the current model (on the left) to the list of models to run.</p></body></html>"))
        self.segmentButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Generate segmentations for tomograms. If multiple models are selected, the results of each model will appear as a separate dataset in the tomogram named <span style=\" font-weight:700;\">[model_name]_[feature]</span>.</p></body></html>"))
        self.segmentButton.setText(_translate("MainWindow", "Segment Tomograms"))
        self.modelInfoBox.setTitle(_translate("MainWindow", "Selected Models:"))
        self.replaceDirectorySeg.setPlaceholderText(_translate("MainWindow", "/path/to/result/directory"))
        self.dataDirectory.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/processed/samples"))
        self.replaceCheckboxSeg.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add the segmentation results to the existing tomograms.</p><p>If not, specify a results directory to copy resulting tomograms to.</p></body></html>"))
        self.replaceCheckboxSeg.setText(_translate("MainWindow", "Replace?"))
        self.dataDirectoryLabel.setText(_translate("MainWindow", "Data Directory:"))
        self.modelCombo.setPlaceholderText(_translate("MainWindow", "select models to use for segmentation"))
        self.removeModelButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Remove the current model shown under <span style=\" font-weight:700;\">Selected Models</span> from the list of models to run.</p></body></html>"))
        self.importModelButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Import a pre-training model from a <span style=\" font-weight:700;\">.pt</span> weights file.</p><p>After selecting the <span style=\" font-weight:700;\">.pt</span> file, a dialogue box will ask for model information, including an identifying name, the model architecture, and the dataset it was trained on.</p></body></html>"))
        self.replaceDirectoryLabelSeg.setText(_translate("MainWindow", "Directory:"))
        self.selectedModelArea.setToolTip(_translate("MainWindow", "Config for the currently selected model."))
        self.nameLabelCurrent.setText(_translate("MainWindow", "Model Name:"))
        self.archLabelCurrent.setToolTip(_translate("MainWindow", "<html><head/><body><p>The architecture of the model (determines general model capabilities).</p></body></html>"))
        self.archLabelCurrent.setText(_translate("MainWindow", "Model Architecture:"))
        self.sampleLabelCurrent.setToolTip(_translate("MainWindow", "<html><head/><body><p>The dataset the model was trained on.</p></body></html>"))
        self.sampleLabelCurrent.setText(_translate("MainWindow", "Dataset Samples:"))
        self.segmentLabelCurrent.setToolTip(_translate("MainWindow", "<html><head/><body><p>What label (e.g., mitochondria, christae) the model is trained to segment.</p></body></html>"))
        self.segmentLabelCurrent.setText(_translate("MainWindow", "Segmentation Label:"))
        self.metricLabelCurrent.setToolTip(_translate("MainWindow", "<html><head/><body><p>General training performance of the model.</p><p><br/></p><p>For DICE score, the closer to 1, the better (i.e., the more closely the model\'s segmentation matched the ground truth in training).</p></body></html>"))
        self.metricLabelCurrent.setText(_translate("MainWindow", "Training Metrics:"))
        self.modelLabel.setText(_translate("MainWindow", "Model:"))
        self.featureButtonSeg.setText(_translate("MainWindow", "Calculate Features"))
        self.modeTabs.setTabText(self.modeTabs.indexOf(self.segmentTab), _translate("MainWindow", "Segment Tomograms"))
        self.sampleSelectLabel.setText(_translate("MainWindow", "Training Samples:"))
        self.sampleSelectCombo.setToolTip(_translate("MainWindow", "<html><head/><body><p>Samples to use for training. If none are selected, tomograms in the <span style=\" font-weight:700;\">Raw Tomogram Directory </span>will be used, and the directory folder name will be taken as the sample name.</p><p>New samples can be added to the list either by <span style=\" font-weight:700;\">typing</span>, or with the <span style=\" font-weight:700;\">button</span> on the <span style=\" font-weight:700;\">right</span>.</p><p>Samples can be removed from the list by <span style=\" font-weight:700;\">right-clicking</span>.</p></body></html>"))
        self.sampleSelectCombo.setPlaceholderText(_translate("MainWindow", "select samples to use for training"))
        self.processTrainGroup.setTitle(_translate("MainWindow", "Pre-Processing"))
        self.rawDirectoryLabelTrain.setText(_translate("MainWindow", "Raw Tomogram Directory:"))
        self.replaceDirectoryProcTrain.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/processed/samples"))
        self.replaceDirectoryLabelProcTrain.setText(_translate("MainWindow", "Directory:"))
        self.rawDirectoryTrain.setToolTip(_translate("MainWindow", "<html><head/><body><p>The <span style=\" font-weight:700;\">raw tomogram</span> directory.</p><p>If <span style=\" font-weight:700;\">Training Samples</span> are selected, this contains <span style=\" font-weight:700;\">sample</span> folders.</p><p>If no samples are selected, this contains tomogram files.</p></body></html>"))
        self.rawDirectoryTrain.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/raw/samples"))
        self.replaceCheckboxProcTrain.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add the pre-processed data to the existing tomogram under the <span style=\" font-weight:700;\">[data]</span> dataset.</p><p>If not, specify a results directory to copy pre-processed tomograms to.</p></body></html>"))
        self.replaceCheckboxProcTrain.setText(_translate("MainWindow", "Replace?"))
        self.processButtonTrain.setText(_translate("MainWindow", "Run Pre-processing"))
        self.annotGroup.setTitle(_translate("MainWindow", "Annotations"))
        self.csvDirectory.setToolTip(_translate("MainWindow", "<html><head/><body><p>The directory where all .csv files, including <span style=\" font-weight:700;\">sample.csv</span> and <span style=\" font-weight:700;\">splits.csv</span> are located.</p><p>If not provided, defaults to <span style=\" font-weight:700;\">src_dir/../csv/</span>.</p></body></html>"))
        self.csvDirectory.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/csv/files"))
        self.chimeraButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Launches <span style=\" font-weight:700;\">ChimeraX</span> with script to select and export slices to annotate.</p><p>The path to <span style=\" font-weight:700;\">ChimeraX.exe</span> must be specified in File &gt; Settings.</p></body></html>"))
        self.chimeraButton.setText(_translate("MainWindow", "Launch ChimeraX"))
        self.csvDirectoryLabel.setText(_translate("MainWindow", ".CSV Directory:"))
        self.annoDirectoryLabel.setText(_translate("MainWindow", "Annotation Directory:"))
        self.sliceDirectoryLabel.setText(_translate("MainWindow", "Slice Directory:"))
        self.annoDirectory.setToolTip(_translate("MainWindow", "<html><head/><body><p>The directory where annotations are located.</p><p>Annotations are <span style=\" font-weight:700;\">.png</span> files where different segmentations are represented as decreasing pixel values.</p></body></html>"))
        self.annoDirectory.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/annotations"))
        self.featuresDisplay.setToolTip(_translate("MainWindow", "<html><head/><body><p>A comma-separated list of segmentation labels, in order of decreasing pixel value in the annotation .png.</p><p>The list can either be edited manually, or new features can be added with the + button on the right.</p></body></html>"))
        self.featuresDisplay.setPlaceholderText(_translate("MainWindow", "list features labeled in order of decreasing annotation value"))
        self.splitsButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add annotations to the existing tomogram files and generate training splits for <span style=\" font-weight:700;\">cross-validation.</span></p><p>These are stored in a <span style=\" font-weight:700;\">splits.csv</span> file in the <span style=\" font-weight:700;\">.CSV Directory</span>.</p></body></html>"))
        self.splitsButton.setText(_translate("MainWindow", "Generate Training Splits"))
        self.sliceDirectory.setToolTip(_translate("MainWindow", "<html><head/><body><p>The directory to save tomogram slices to manually segment for ground truth labels as <span style=\" font-weight:700;\">.pngs</span>.</p><p>If not provided, defaults to <span style=\" font-weight:700;\">src_dir/../slices/sample</span> or <span style=\" font-weight:700;\">src_dir/../slices/</span>.</p></body></html>"))
        self.sliceDirectory.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/png/slices"))
        self.featuresLabel.setText(_translate("MainWindow", "Labeled Features:"))
        self.featuresAdd.setToolTip(_translate("MainWindow", "<html><head/><body><p>Add a feature to label. Must be already present in the annotations.</p></body></html>"))
        self.splitsButtonNew.setToolTip(_translate("MainWindow", "<html><head/><body><p>Create new training splits given an existing <span style=\" font-weight:700;\">splits.csv</span>.</p></body></html>"))
        self.splitsButtonNew.setText(_translate("MainWindow", "Generate New Training Splits"))
        self.dataDirectoryLabelTrain.setText(_translate("MainWindow", "Data Directory:"))
        self.dataDirectoryTrain.setPlaceholderText(_translate("MainWindow", "/path/to/directory/with/processed/samples"))
        self.trainGroup.setTitle(_translate("MainWindow", "Training"))
        self.modelSettings.setToolTip(_translate("MainWindow", "<html><head/><body><p>View and change the model\'s paremeters and training setup.</p></body></html>"))
        self.trainButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Start training the given model with the given training setup.</p><p>Progress can be tracked in the <span style=\" font-weight:700;\">Console</span> and through the progress bar.</p></body></html>"))
        self.trainButton.setText(_translate("MainWindow", "Train Model"))
        self.labelLabel.setText(_translate("MainWindow", "Label:"))
        self.modelComboTrain.setPlaceholderText(_translate("MainWindow", "select a model architecture to train with"))
        self.labelCombo.setPlaceholderText(_translate("MainWindow", "select a label to train for from annotations"))
        self.modelLabelTrain.setText(_translate("MainWindow", "Model:"))
        self.featureButtonTrain.setText(_translate("MainWindow", "Calculate Features"))
        self.modeTabs.setTabText(self.modeTabs.indexOf(self.trainingTab), _translate("MainWindow", "Train Model"))
        self.consoleBox.setTitle(_translate("MainWindow", "Console"))
        self.consoleText.setPlaceholderText(_translate("MainWindow", "> Python console outputs here"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionSettings.setText(_translate("MainWindow", "Settings"))
        self.actionGithub.setText(_translate("MainWindow", "Github"))
        self.actionSave_Preset.setText(_translate("MainWindow", "Save"))
        self.actionSave_Preset.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actiondefault.setText(_translate("MainWindow", "default"))
        self.action.setText(_translate("MainWindow", "remove preset"))
        self.actionSaveAs_Preset.setText(_translate("MainWindow", "Save As"))
        self.actionSaveAs_Preset.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionLoad_Preset.setText(_translate("MainWindow", "Load"))
        self.actionLoad_Preset.setShortcut(_translate("MainWindow", "Ctrl+O"))
